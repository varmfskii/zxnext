@author Theodore (Alex) Evans
@date 10 Dec 2020
@index INDEX
@title ZX Spectrum Next Programming Notes
@version 201204
@------------------------------------------------------------------------------
@node MAIN
@next INTRODUCTION
@{c}@{h1}ZX Spectrum Next Programming Notes

@{c}@{h2}Theodore (Alex) Evans

@{c}@{h2}4 December 2020

@------------------------------------------------------------------------------
@node INDEX
@{r}ZX Spectrum Next Programming Notes

Chapters
 1 @{" Introduction " LINK INTRODUCTION}
 2 @{" Video " LINK VIDEO}
 3 Audio
 4 Memory
 5 zxnDMA
 6 Copper
 7 Interrupts
 8 Serial Communications
 9 Pi0 Acceleration
10 System Software

Appendices
 A Ports
 B Registers
 C Extended Opcodes to Mnemonics
 D Mnemonics to Extended Opcodes
 E File Formats
 F Call Tables

@------------------------------------------------------------------------------
@node INTRODUCTION
@next VIDEO
@prev MAIN
@{r}ZX Spectrum Next Programming Notes
@{c}@{h1}Chapter 1
@{h1}Introduction

The ZX Spectrum Next is an extension of the original ZX Spectrum implemented in
FPGA which implements many of the common additions to the system includin the
characteristics of all of the original ZX Spectrum line, including the
Timex/Sinclair 2068, along with a number of characteristics to modernize the
design.

This document is an attempt to consolidate the programming interface for the ZX
Spectrum Next into a single location. This document started when much of the
documentation on the ZX Spectrum Next site (https://www.specnext.com/) was out
of date and/or difficult to figure out. The way to figure out how things
actually worked was to either dig through the forums and ask questions or find
someones code that implemented a particular bit of functionality and reverse
engineer it. The situation has greatly improved and this document may even be
redundant at this point.

Description from http://www.specnext.com/about/:

The Spectrum Next is fully implemented with FPGA technology, ensuring it can be
upgraded and enhanced while remaining truly compatible with the original
hardware by using special memory chips and clever design. Here's what under the
hood of the machine:

-   Processor: Z80n normal and turbo modes
-   Memory: 1024Kb RAM (expandable to 2048Kb on board)
-   Video: Multilayer video implementing classic ZX Spectrum, Timex
    Hi-Resolution, Timex Hi-Colour, LoRes, Layer 2, and Tilemap video modes
    with Hardware sprites
-   Video Output: RGB, VGA, HDMI
-   Storage: SD Card slot, with DivMMC-compatible protocol
-   Audio: ZX Spectrum 1-bit audio, Turbo Sound Next (3x AY-3-8912 audio chips
    with stereo output), stereo PCM audio, and ability to use Pi accelerator as
    a sound source
-   Joystick: DB9 compatible with Cursor, Kempston and Interface 2 protocols
    (selectable)
-   PS/2 port: Mouse with Kempston mode emulation and an external keyboard
-   Special: Multiface functionality for memory access, savegames, cheats etc.
-   Tape support: Mic and Ear ports for tape loading and saving
-   Expansion: Original external bus expansion port and accelerator expansion
    port
-   Accelerator board (optional): Pi Zero with GPU / 1Ghz CPU / 512Mb RAM
-   Network (optional): Wi Fi module
-   Extras: Real Time Clock (optional), internal speaker (optional)

@------------------------------------------------------------------------------
@node VIDEO_TOC
@prev INDEX
@{r}ZX Spectrum Next Programming Notes
@{h1}Video Table of Contents

@{" General Information " LINK GENERAL}
@{" Layer 1 (ULA) " LINK LAYER1}
@{" Layer 2 " LINK LAYER2}
Layer 3 (Tilemap)
Sprites

@------------------------------------------------------------------------------
@node VIDEO
@next VIDEO_GENERAL
@prev INTRODUCTION
@toc VIDEO_TOC
@{r}ZX Spectrum Next Programming Notes
@{c}@{h1}Chapter 2
@{h1}Video

ZX Spectrum Next video splits the display types into four categories (layer 1
(ULA/Timex/LoRes), layer 2, layer 3 (tilemap) and sprites) which have their own
sets of controls for colour palettes, clipping, and scrolling. Some aspects of
ULA and tilemap are tied together, but all the rest operate in a largely
independent manner using a layering system. The ULA category has a number of
separate video modes that it can use. One of these (LoRes) is incompatible with
using tilemaps (This may have change in the most recent cores).

@------------------------------------------------------------------------------
@node VIDEO_GENERAL
@next LAYER1
@prev VIDEO
@toc VIDEO_TOC
@{r}ZX Spectrum Next Programming Notes
@{h2}General Features

There are a number of control features for the various video modes that are
done in a unified fashion. These features are layering and transparency,
palettes, scrolling, and clipping. For the sake of convenience we will
occasionally talk about a global coordinate system for graphics on the ZX Next.
This coordinate system has (0, 0) at the upper left corner of the usable
display area and (319, 255) at the lower right corner. Individual pixels
generally correspond to integer locations in this grid, but some modes may
either double or halve this grid. This will be discussed in the sections for
each of the video layers.

Video Layering and Transparency

Video for the ZX Next is composed of a number of features and layers each of
which may have its own set of video modes. Not all of these features are
mandatory.

By composing together the border colour and transparency fallback color, layer
1 (ULA, Timex modes, or LoRes), layer 2 (256 x 192 x 256, 320 x 256 x 256, or
640 x 256 x 16), layer 3 (16 or 2 colour tiles), and sprites; we generate the
full video display.

The border/transparency fallback is the bottom with the ordering of the layers
controlled by a combination of the video layering register (Next register $15
(21) bits 4-2), the interaction of layers 1 and 3 (Next register $6B (107) bit
0), and whether or not a pixel in layer 2 is set as a priority colour.

Register (R/W) $15 () => Sprite and Layer System Setup

-   bit 7 = LoRes mode (0 on reset)
-   bit 6 = Sprite priority (1 = sprite 0 on top, 0 = sprite 127 on top) (0 on
    reset)
-   bit 5 = Enable sprite clipping in over border mode (0 on reset)
-   bits 4-2 = set layers priorities (000 on reset)
    -   000 - S L U
    -   001 - L S U
    -   010 - S U L
    -   011 - L U S
    -   100 - U S L
    -   101 - U L S
    -   110 - S(U+L) ULA and Layer 2 combined, colours clamped to 7
    -   111 - S(U+L-5) ULA and Layer 2 combined, colours clamped to [0,7]
-   bit 1 = Enable Sprites Over border (0 on reset)
-   bit 0 = Enable Sprites (0 on reset)

Transparency for Layer 2, Layer 1, and 1-bit Tilemaps are controlled by Next
register $14 (20) and defaults to $E3. Sprites and 4-bit Tilemaps have their
own registers ($4B and $4C respectively) for setting their transparency index
(not colour). This colour ignores the state of the least significant blue bit,
so $E3 equates to both $1C6 and $1C7. For Sprites and Tilemaps transparency is
determined by colour index. For Sprites this is controlled by register $4B
(with only the least significant 4-bits being relevant for 16-colour Sprites).
For Tilemaps, the transparency index is set by register $4C. If all layers are
transparent, the transparency fallback colour is displayed. This is set by
register $4A.

Register (R/W) $14 () => Global transparency color

-   bits 7-0 = Transparency color value ($E3 after a reset)

(Note: this value is 8-bit, so the transparency is compared against only by the
MSB bits of the final 9-bit colour)
(Note2: this only affects Layer 2, ULA and LoRes. Sprites use register $4B for
transparency and tilemap uses nextreg $4C)

Register (R/W) $4A () => Fallback Colour Value

-   bits 7-0 = 8-bit colour if all layers are transparent ($E3 on reset)

(black on reset = 0)

Register (R/W) $4B () => Sprite Transparency Index

-   bits 7-0 = Index value ($E3 if reset)

For 4-bit sprites only the bottom 4-bits are relevant.

Register (R/W) $4C () => Level 3 Transparency Index

-   bits 7-4 = Reserved, must be 0

-   bits 3-0 = Index value ($0F on reset)

Palette

Next Colour Palettes

Each video mode group has a pair of palettes assigned to it a primary and an
alternate palette. Each palette entry is actually a 9-bit value (RRRGGGBBB) and
can be set by selecting a palette using nextreg $43 (palette control), the
entry using nextreg $40 (palette index), then writing the value into nextreg
$44 (palette value, 9-bit) using pairs of consecutive writes for each palette
value or nextreg $41 (palette value, 8-bit). Once a palette index has been
selected writes automatically increment the palette index number so it is
possible to efficiently write the values for a collection of palette entries.

Register (R/W) $40 () => Palette Index Select

-   bits 7-0 = Palette Index Number

Selects the palette index to change the associated colour

For ULA only, INKs are mapped to indices 0 through 7, BRIGHT INKs to indices 8
through 15, PAPERs to indices 16 through 23 and BRIGHT PAPERs to indices 24
through 31. In EnhancedULA mode, INKs come from a subset of indices from 0
through 127 and PAPERs from a subset of indices from 128 through 255.

The number of active indices depends on the number of attribute bits assigned
to INK and PAPER out of the attribute byte.

In ULAplus mode, the last 64 entries (indices 192 to 255) hold the ULAplus
palette. The ULA always takes border colour from PAPER for standard ULA and
Enhanced ULA

Register (R/W) $41 () => 8-bit Palette Data

-   bits 7-0 = Colour Entry in RRRGGGBB format

The lower blue bit of the 9-bit internal colour will be the logical or of bits
0 and 1 of the 8-bit entry. After each write, the palette index auto-increments
if aut-increment has been enabled (NextReg $43 bit 7), Reads do not
auto-increment.

Register (R/W) $43 () => Palette Control

-   bit 7 = Disable palette write auto-increment.
-   bits 6-4 = Select palette for reading or writing:
    -   000 = ULA first palette
    -   100 = ULA second palette
    -   001 = Layer 2 first palette
    -   101 = Layer 2 second palette
    -   010 = Sprite first palette
    -   110 = Sprite second palette
    -   011 = Layer 3 first palette
    -   111 = Layer 3 second palette
-   bit 3 = Select Sprite palette (0 = first palette, 1 = second palette)
-   bit 2 = Select Layer 2 palette (0 = first palette, 1 = second palette)
-   bit 1 = Select ULA palette (0 = first palette, 1 = second palette)
-   bit 0 = Enable EnhancedULA mode if 1. (0 after a reset)

Register (R/W) $44 () => 9-bit Palette Data
Non Level 2

-   1st write
-   bits 7-0 = MSB (RRRGGGBB)

-   2nd write
-   bits 7-1 = Reserved, must be 0
-   bit 0 = LSB (B)

Level 2

-   1st write
-   bits 7-0 = MSB (RRRGGGBB)

-   2nd write
-   bit 7 = Priority
-   bits 6-1 = Reserved, must be 0
-   bit 0 = LSB (B)

9-bit Palette Data is entered in two consecutive writes; the second write
autoincrements the palette index if auto-increment is enabled in NextREG $43
bit 7

If writing an L2 palette, the second write's D7 holds the L2 priority bit which
if set (1) brings the colour defined at that index on top of all other layers.
If you also need the same colour in regular priority (for example: for
enviromental masking) you will have to set it up again, this time with no
priority.

Reads return the second byte and do not autoincrement. Writes to nextreg $40,
$41, $41, or $43 reset to the first write.

Scrolling

The ZX Spectrum Next has four sets of scrolling registers to independently
contol the display offsets of various video modes (Layer2, ULA, Tilemap, and
LoRes). When the video is offset, the portion that is pushed off the screen (to
the left and or top) then becomes visible on the opposite side of the screen so
that the video offset values are effectively the coordinates of the origin in a
toroidal universe.

Clipping

The ZX Spectrum Next has four clipping registers create a window of the layer
that is visible. Clipping is managed by a set of four successive writes to the
clipping register applicable for the video mode. If a section is masked off by
clipping, it is as if the area were the transparency colour and the video lyers
behind it become visible.

@------------------------------------------------------------------------------
@node LAYER1
@next LAYER2
@prev VIDEO_GENERAL
@toc VIDEO_TOC
@{r}ZX Spectrum Next Programming Notes
@{h2}Layer 1

  Mode         Resolution     Colour     
  ----------- ------------ ------------- --
  ULA           256x192       ULA 8x8    
  Timex Alt     256x192       ULA 8x8    
  HiCol         256x192       ULA 8x1    
  HiRes         512x192      2 colours   
  128 Alt       256x192       ULA 8x8    
  LoRes          128x96     256 colours  
  Rad            128x96     16 colours   

  : Layer 1 Mode summary

The Layer 1 consists of ZX Spectrum ULA video, Timex video modes, and the
Spectrum Next's lores video modes all use 16k memory bank 5 or 7 with the data
coming from some combination of addresses $0000-$17FF (bitmap 1), $1800-$1AFF
(attribute 1), $2000-$37FF (bitmap 2), and $3800-$3AFF (attribute 2) within the
selected bank. Assuming default memory mapping and the use of bank 5 this will
be mapped as some combination of memory $4000-$57FF, $5800-$5AFF, $6000-$77FF,
$780-$7AFF. All of the modes other than the lores mode can either use the
default ZX Spectrum colours, ULANext mode, or an emulation of ULAplus. In the
Spectrum and Timex modes all colours are either Paper (foreground), paper
(background), or border colours.

               BM 1    Attr 1   BM 2    Attr 2   BM a    Attr a
  ----------- ------- -------- ------- -------- ------- --------
  Bank           5       5        5       5        7       7
  start        $0000   $1800    $2000   $3800    $0000   $1800
  end          $17FF   $1AFF    $37FF   $3AFF    $17FF   $1AFF
  ULA            *       *                              
  Timex Alt                       *       *             
  HiCol          *                *                     
  HiRes          *                *                     
  128 Alt                                          *       *
  LoRes          *                *                     
  Rad            1                2                     

  : Layer 1 Memory Map

Colour Attributes

The ZX Spectrum Next has three major modes for colour attributes: the ZX
Spectrum attribute mapping, which is augmented by using the ZX Spectrum Next's
palette; ULANext, which allows the user to how many foreground and how many
background colous are to be selected by the attribute bytes; and an emulation
of ULAplus.

ULA Colour

In ULA colour INKs are mapped to indices 0-7, Bright INKS to indices 8-15,
PAPERs to indices 16-23 and Bright PAPERs to indices 24-31. This is the default
state for interpreting ULA palettes.

ULANext

The ULANext modes use a varying number of bits from the attribute byte to
determine the ink colours as the palette index from the appropriate bits (all
others being zero) and the paper colours coming from the indicated value+128
with palette format 255 being a special case where all the bits determine the
ink colour while the paper is always palette index 128. The ULA always takes
border colour from paper. ULANext is enabled using bit 0 of nextreg $43
(palette control) and controlled with nextreg $42 (ULA Next attribute byte
format)

ULAplus

The ZX Next emulates ULAPlus using the last 64 (192-255) entries of the ULA
palette. ULAplus is controlled using two ports: $BF3B (register port) and $FF3B
(data port)

I/O ports

ULAplus is controlled by two ports.

$BF3B is the register port (write only)

The byte output will be interpreted as follows:

-   Bits 7-6: Select the register group. Two groups are currently available:
    -   00=palette group
        When this group is selected, the sub-group determines the entry in the
        palette table (0-63).
    -   01=mode group
        The sub-group is (optionally) used to mirror the video functionality of
        Timex port $FF as follows:
-   Bits 5-0: Select the register sub-group

-   Mode group
-   Bits 5-3: Sets the screen colour in hi-res mode.
    -   000=Black on White
    -   001=Blue on Yellow
    -   010=Red on Cyan
    -   011=Magenta on Green
    -   100=Green on Magenta
    -   101=Cyan on Red
    -   110=Yellow on Blue
    -   111=White on Black
-   Bits 2-0: Screen mode.
    -   000=screen 0 (bank 5)
    -   001=screen 1 (bank 5)
    -   010=hi-colour (bank 5)
    -   100=screen 0 (bank 7)
    -   101=screen 1 (bank 7)
    -   110=hi-colour (bank 7)
    -   110=hi-res (bank 5)
    -   111=hi-res (bank 7)

$FF3B is the data port (read/write)

When the palette group is selected, the byte written will describe the color.

When the mode group is selected, the byte output will be interpreted as
follows:

-   Bit 0: ULAplus palette on (1) / off (0)
-   Bit 1: (optional) grayscale: on (1) / off (0) (same as turing the color off
    on the television)

Implementations that support the Timex video modes use the $FF register as the
primary means to set the video mode, as per the Timex machines. It is left to
the individual implementations to determine if reading the port returns the
previous write or the floating bus.

GRB palette entries

G3R3B2 encoding
For a device using the GRB colour space the palette entry is interpreted as
follows

-   Bits 7-5: Green intensity.
-   Bits 4-2: Red intensity.
-   Bits 1-0: Blue intensity.

This colour space uses a sub-set of 9-bit GRB. The missing lowest blue bit is
set to OR of the other two blue bits (Bb becomes 000 for 00, and Bb1 for
anything else). This gives access to a fixed half the potential 512 colour
palette. The reduces the jump in intensity in the lower range in the earlier
version of the specification. It also means the standard palette can now be
represented by the ULAplus palette.

Grayscale palette entries

This is an optional ULAPlus feature that is not supported on the Next.

In grayscale mode, each palette entry describes an intensity from zero to 255.
This can be achieved by simply removing the colour from the output signal.

Limitations

Although in theory 64 colours can be displayed at once, in practice this is
usually not possible except when displaying colour bars, because the four CLUTs
are mutually exclusive; it is not possible to mix colours from two CLUTs in the
same cell. However, with software palette cycling it is possible to display all
256 colours on screen at once.

Emulation

The 64 colour mode lookup table is organized as 4 palettes of 16 colours.

Bits 7 and 6 of each Spectrum attribute byte (normally used for FLASH and
BRIGHT) will be used as an index value (0-3) to select one of the four colour
palettes.

Each colour palette has 16 entries (8 for INK, 8 for PAPER). Bits 0 to 2 (INK)
and 3 to 5 (PAPER) of the attribute byte will be used as indexes to retrieve
colour data from the selected palette.

With the standard Spectrum display, the BORDER colour is the same as the PAPER
colour in the first CLUT. For example BORDER 0 would set the border to the same
colour as PAPER 0 (with the BRIGHT and FLASH bits not set).

The complete index can be calculated as
ink_colour = (FLASH * 2 + BRIGHT) * 16 + INK paper_colour = (FLASH * 2 +
BRIGHT) * 16 + PAPER + 8

Palette file format

The palette format doubles as the BASIC patch loader. This enables you to edit
patches produced by other people.

    ; 64 colour palette file format (internal) - version 1.0
    ; copyright (c) 2009 Andrew Owen
    ;
    ; The palette file is stored as a BASIC program with embedded machine code

    header:

    db 0x00 ; program file
    db 0x14, 0x01, "64colour" ; file name
    dw 0x0097 ; data length
    dw 0x0000 ; autostart line
    dw 0x0097 ; program length

    basic:

    ; 0 RANDOMIZE USR ((PEEK VAL "2
    ; 3635"+VAL "256"*PEEK VAL "23636"
    ; )+VAL "48"): LOAD "": REM

    db 0x00, 0x00, 0x93, 0x00, 0xf9, 0xc0, 0x28, 0x28
    db 0xbe, 0xb0, 0x22, 0x32, 0x33, 0x36, 0x33, 0x35
    db 0x22, 0x2b, 0xb0, 0x22, 0x32, 0x35, 0x36, 0x22
    db 0x2a, 0xbe, 0xb0, 0x22, 0x32, 0x33, 0x36, 0x33
    db 0x36, 0x22, 0x29, 0x2b, 0xb0, 0x22, 0x34, 0x38
    db 0x22, 0x29, 0x3a, 0xef, 0x22, 0x22, 0x3a, 0xea

    start:

    di ; disable interrupts
    ld hl, 38 ; HL = length of code
    add hl, bc ; BC = entry point (start) from BASIC
    ld bc, 0xbf3b ; register select
    ld a, 64 ; mode group
    out (c), a ;
    ld a, 1 ;
    ld b, 0xff ; choose register port
    out (c), a ; turn palette mode on
    xor a ; first register

    setreg:

    ld b, 0xbf ; choose register port
    out (c), a ; select register
    ex af, af' ; save current register select
    ld a, (hl) ; get data
    ld b, 0xff ; choose data port
    out (c), a ; set it
    ex af, af' ; restore current register
    inc hl ; advance pointer
    inc a ; increase register
    cp 64 ; are we nearly there yet?
    jr nz, setreg ; repeat until all 64 have been done
    ei ; enable interrupts
    ret ; return

    ; this is where the actual data is stored. The following is an example palette.

    registers:

    db 0x00, 0x02, 0x18, 0x1b, 0xc0, 0xc3, 0xd8, 0xdb ; INK
    db 0x00, 0x02, 0x18, 0x1b, 0xc0, 0xc3, 0xd8, 0xdb ; PAPER
    db 0x00, 0x03, 0x1c, 0x1f, 0xe0, 0xe3, 0xfc, 0xff ; +BRIGHT
    db 0x00, 0x03, 0x1c, 0x1f, 0xe0, 0xe3, 0xfc, 0xff ;
    db 0xdb, 0xd8, 0xc3, 0xc0, 0x1b, 0x18, 0x02, 0x00 ; +FLASH
    db 0xdb, 0xd8, 0xc3, 0xc0, 0x1b, 0x18, 0x02, 0x00 ;
    db 0xff, 0xfc, 0xe3, 0xe0, 0x1f, 0x1c, 0x03, 0x00 ; +BRIGHT/
    db 0xff, 0xfc, 0xe3, 0xe0, 0x1f, 0x1c, 0x03, 0x00 ; +FLASH

    terminating_byte:

    db 0x0d 

Layer 1 Scrolling

Layer 1 has two sets of scrolling registers. One for the the legacy modes (ZX
Spectrum, Alternate Page, Timex Hi-Resoulution, and Timex Hi-colour) and a
second set for the two ZX Spextrum Next specific LoRes modes. All modes scroll
as if they were 256 x 192 screens located at global coordinates (32, 32) to
(287, 223), The registers for the legacy modes are $26 and $27 and the
registers for the LoRes modes are $32 and $33.

Register (R/W) $26 () => ULA Horizontal Scroll Control

-   bits 7-0 = ULA X Offset (0-255) (0 on reset)

Register (R/W) $27 () => ULA Vertical Scroll Control

-   bits 7-0 = ULA Y Offset (0-191) (0 on reset)

Register (R/W) $32 () => Layer 1,0 (LoRes) Horizontal Scroll Control)

-   bits 7-0 = X Offset (0-255) ($00 on reset)

Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and
smoothness as Layer 2.

Register (R/W) $33 () => Layer 1,0 (LoRes) Vertical Scroll Control)

-   bits 7-0 = Y Offset (0-191) ($00 on reset)

Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and
smoothness as Layer 2.

Layer 1 Clipping

All of the modes in the Layer 1 share a single clipping register, $1A. The clip
index may alternately be set using register $1C. This is expecially useful for
reading the current clipping coordinates as reads on the clipping register do
not change the index. Note that clipping coordinates are based on a full
display area for the mode of 256 x 192 resolution even though not all modes
have that resolution.

Register (R/W) $1A () => Layer 0 (ULA/LoRes) Clip Window Definition

-   bits 7-0 = Coord. of the clip window
    -   1st write = X1 position
    -   2nd write = X2 position
    -   3rd write = Y1 position
    -   4rd write = Y2 position

The values are 0,255,0,191 after a Reset
Reads do not advance the clip position

Register (R/W) $1C () => Clip Window Control

Read
-   bits 7-6 = Layer 3 Clip Index
-   bits 5-4 = Layer 0/1 Clip Index
-   bits 3-2 = Sprite clip index
-   bits 1-0 = Layer 2 Clip Index

Write
-   bits 7-4 = Reserved, must be 0
-   bit 3 - reset Layer 3 clip index
-   bit 2 - reset Layer 0/1 clip index
-   bit 1 - reset sprite clip index.
-   bit 0 - reset Layer 2 clip index.

ZX Spectrum Mode

Timex mode 0

This is the default ULA mode and has its origins in the original ZX Spectrum.
It uses 256 x 192 pixels located at global coordinates (32, 32) to (287, 223)
with 8 x 8 colour attribute areas mapped into a 32 x 24 grid. If Timex modes
are not enabled, this and the LoRes mode are the only ones available, so you
would switch back to this mode by writing 000xxxxx to Next register $15 (21,
the sprites and layers register). If another Timex mode is enabled, then this
is mode 0 so you would write 0 to port $ff to enable it. This is a 256 x 192
video mode. The bitmap 1 area is used for selection between ink and paper
colours with one bit per pixel and the attribute 1 area for colour attributes.

The easiest way to visualize the mapping of this mode is to think of the
256 x 192 area as being divided into a 32 x 24 grid of 8 x 8 characters. IF we
consider X and Y as the position in the grid and R to the the row within the
character. For ink/paper selection, 0=paper, 1=ink and the entries are stored
left to right as lsb to msb within the bye. The address for a pixel value is:
0R(4:3)Y(2:0)R(2:0)C(4:0). Each 8 x 8 cell has its own colour attribute where
the address for an attribute cell is 0110R(4:0)C(4:0) in other words
mapped lineally column-wise starting at the beginning of the attribute 1 area.

Code:

      ;; from any other Timex mode:
      ld a,$00
      ld c,$ff
      out (c),a

      ;; from LoRes mode:
      ld bc,$243B ; next register select port
      ld a,$15
      out (c),a
      ld bc,$253B ; next register r/w port
      in a,(c)
      and $7f
      out (c),a

Alternate Page Mode

Timex mode 1

This mode is the same as ZX Spectrum mode except it is at an alternate
addresses. Alternate page mode is selected by enabling Timex modes by writing
00xxxx1xx to Next register $08 (8, Peripheral 3 setting) then writing 1 to the
Timex ULA port ($ff). It is identical to ZX Spectrum mode except the pixel are
mapped to the bitmap 2 area giving use pixel addresses of
1R(4:3)Y(2:0)R(2:0)C(4:0) and the attributes to the attribute 2 area with
addresses of 1110R(4:0)C(4:0).

Code:

    ;; disable LoRes mode:
    ld bc,$243B ; next register select port
    ld a,$15
    out (c),a
    ld bc,$253B ; next register r/w port
    in a,(c)
    and $7f
    out (c),a
    ;; set Timex mode
    ld bc,$243B ; next register select port
    ld a,$08
    out (c),a
    ld bc,$253B ; next register r/w port
    in a,(c)
    or $04
    out (c),a
    ;; set alternate page mode
    ld c,$ff
    ld a,$01
    out (c),a

Timex Hi-Colour Mode

Timex mode 2

This mode is a 256 x 192 video mode located at global coordinates (32, 32) to
(287, 223) with 8 x 1 colour attribute mapping on a 32 x 192 grid. It is
selected by writing 2 to the Timex ULA port ($ff). Pixel mapping in this mode
is the same as in ZX Spectrum mode using the bitmap 1 area based on
0R(4:3)Y(2:0)R(2:0)C(4:0). The colour attributes use the bitmap 2 area with 8 x
1 colour attribute areas corresponding to the addresses
1R(4:3)Y(2:0)R(2:0)C(4:0).

Code:

    ;; disable LoRes mode:
    ld bc,$243B ; next register select port
    ld a,$15
    out (c),a
    ld bc,$253B ; next register r/w port
    in a,(c)
    and $7f
    out (c),a
    ;; set Timex mode
    ld bc,$243B ; next register select port
    ld a,$08
    out (c),a
    ld bc,$253B ; next register r/w port
    in a,(c)
    or $04
    out (c),a
    ;; set hi-colour mode
    ld c,$ff
    ld a,$02
    out (c),a

Timex Hi-Resolution Mode

Timex mode 6

This is a monochrome 512 x 192 video mode located at global coordinates (32,
32) to (287, 223) with each pixel being half width. It is selected by writing
to the Timex ULA port ($ff with values that also select which two colours (or
colour entries in ULANext mode) you use.

Pixels are mapped into both the bitmap 1 and bitmap 2 areas where 8-pixel wide
character columns alternate between the two bitmap areas. The pixels within a
byte being rendered left to right lsb to msb as in other Spectrum video modes.
The addresses for each row within a character are based on a 64 x 32 grid of 8
x 8 characters which using a 64 x 24 R, C, and Y scheme gives us addresses of
the form C(0)R(4:3)Y(2:0)R(2:0)C(5:1).

Code:

    ;; disable LoRes mode:
    ld bc,$243B ; next register select port
    ld a,$15
    out (c),a
    ld bc,$253B ; next register r/w port
    in a,(c)
    and $7f
    out (c),a
    ;; set Timex mode
    ld bc,$243B ; next register select port
    ld a,$08
    out (c),a
    ld bc,$253B ; next register r/w port
    in a,(c)
    or $04
    out (c),a
    ;; set hi-res mode, black on white
    ld c,$ff
    ld a,$06
    out (c),a

Lo-Resolution Mode

This is a Spectrum Next specific video mode with a resolution of 128 x 96
located at global coordinates (32, 32) to (287, 223) with each pixel being
double height and double width replacing the old Radistan mode. It can either
allow for 16 colours, in which case it uses either the bitmap 1 area or the
bitmap 2 area, or 256 colours using both bitmap 1 and bitmap 2. The colour of
each pixel can be selected independently with data ordered linearly in a row
major fashion. In the case of 16 colour mode, the nybbles describing the
colours are X major (MSN LSN). Scrolling is by half pixels and uses different
registers ($32 and $33) from the rest of the ULA group modes. LoRes mode is
enabled by writing 100xxxxx to Next register $15 (the sprites and layers
register) with Next register $6A used to decide whether it is 16 or 256
colours.

Register (R/W) $15 () => Sprite and Layer System Setup

-   bit 7 = LoRes mode (0 on reset)
-   bit 6 = Sprite priority (1 = sprite 0 on top, 0 = sprite 127 on top) (0 on
    reset)
-   bit 5 = Enable sprite clipping in over border mode (0 on reset)
-   bits 4-2 = set layers priorities (000 on reset)
    -   000 - S L U
    -   001 - L S U
    -   010 - S U L
    -   011 - L U S
    -   100 - U S L
    -   101 - U L S
    -   110 - S(U+L) ULA and Layer 2 combined, colours clamped to 7
    -   111 - S(U+L-5) ULA and Layer 2 combined, colours clamped to [0,7]
-   bit 1 = Enable Sprites Over border (0 on reset)
-   bit 0 = Enable Sprites (0 on reset)

Register (R/W) $32 () => Layer 1,0 (LoRes) Horizontal Scroll Control)

-   bits 7-0 = X Offset (0-255) ($00 on reset)

Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and
smoothness as Layer 2.

Register (R/W) $33 () => Layer 1,0 (LoRes) Vertical Scroll Control)

-   bits 7-0 = Y Offset (0-191) ($00 on reset)

Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and
smoothness as Layer 2.

Register (R/W) $6A () => Layer 1,0 (LoRes) Control

-   bits 7-6 = reserved, must be 0
-   bit 5 = Enable Radistan (16-colour) (0 on reset)
-   bit 4 = Radistan DFILE switch (xor with bit 0 of port $ff) (0 on reset)
-   bits 3-0 = Radistsan palette offset (0 on reset)
-   bits 1-0 = ULAplus palette offset (0 on reset)

Code: 256 colour

    ;; enable LoRes mode:
    nextreg $15,$80
    ;; 256-colour mode
    ld bc,$243B ; next register select port
    ld a,$6A
    out (c),a
    ld bc,$253B ; next register r/w port
    in a,(c)
    and $EF ; lores radistan control
    out (c),a

Code: 16 colour

    ;; enable LoRes mode:
    nextreg $15,$80
    ;; 16-colour mode
    nextreg $6A,$10

@------------------------------------------------------------------------------
@node LAYER2
@prev LAYER1
@toc VIDEO_TOC
@{r}ZX Spectrum Next Programming Notes
@{h2}Layer 2

Layer 2 is a for bitmapped graphics. It supports modes with 256 x 192 x 256
resolution at global coordinates (32, 32) to (287, 223) mapped linearly left to
right/top to bottom, 320 x 256 x 256 resolution at global coordinates (0, 0) to
(318, 255) mapped top to bottom/left to right, and 640 x 256 x 16 resolution at
global coordinates (0, 0) to (319, 255) with half width pixels mapped so that
the nybbles in a byte are adjacent columns (MSN on the left) and bytes running
top to bottom/left to right. It can be mapped starting at any 16k memory
blocks. The 256 x 192 x 256 mode requires 3 consecutive blocks (48k) while the
others use 5 consecutive blocks (80k).

Configuration

Layer 2 is enabled using port $123B or register $69. The mode is selected using
register $70. How layer 2 memory is overlaid on main memory is controled by
port $123B and register $70. The location in memory is controlled by register
$12 with a shadow area pointed to by register $13 for double buffering. Finally
port $123B is used to select either the main RAM area or the shadow RAM area
for rendering the layer.

Port $123B () Layer 2

Bit 4 = 0
-   bits 7-6 = Video RAM bank select
    -   00 = first 16k
    -   01 = second 16k
    -   10 = third 16k
    -   11 = first 48k
-   bit 5 = Reserved, must be 0
-   bit 4 = 0
-   bit 3 = Shadow layer 2 select
-   bit 2 = Enable layer 2 read paging
-   bit 1 = Layer 2 visible (mirrored in register $69)
-   bit 0 = Enable layer 2 write paging

Bit 4 = 1
-   bits 7-5 = Reserved, must be 0
-   bit 4 = 1
-   bit 3 = Reserved, must be 0
-   bit 2-0 = 16k bank relative offset

Register (R/W) $12 () => Layer 2 Active RAM bank

-   bits 7-6 = Reserved, must be 0
-   bits 5-0 = RAM bank (point to bank 8 after a Reset, NextZXOS modifies to 9)

Register (R/W) $13 () => Layer 2 Shadow RAM bank

-   bits 7-6 = Reserved, must be 0
-   bits 5-0 = RAM bank (point to bank 11 after a Reset, NextZXOS modifies
    to 12)

Register (R/W) $69 () => Display Control 1

-   bit 7 = Layer 2 Enable (Port $123B bit 1 alias)
-   bit 6 = ULA Shadow display enable (Port $7FFD bit 3 alias)
-   bits 5-0 = Timex alias (Port $FF alias)

Register (R/W) $70 () => Layer 2 Control

-   bits 7-6 = Reserved, must be 0
-   bits 5-4 = Resolution (00 on soft reset)
    -   00 = 256 x 192 x 256
    -   01 = 320 x 256 x 256
    -   10 = 640 x 256 x 16
    -   11 = Do not use
-   bits 3-0 = Palette offset ($0 on soft reset)

Layer 2 256 x 192, Write only overlaid on ROM

    p_layer2: defl $123b
    start:
      ld bc,p_layer2
      ld a,$03       ; enable, wo, 1st 16k
      out (c),a
      call wrtpage
      ld bc,p_layer2
      ld a,$43       ; enable, wo, 2nd 16k
      out (c),a
      call wrtpage
      ld bc,p_layer2
      ld a,$83       ; enable, wo, 3rd 16k
      out (c),a
      call wrtpage
      ret
    wrtpage:  
      ld hl,$0000
      ld bc,$0040    ; 40*256 writes
    loop:
      ld (hl),b
      inc hl
      djnz loop
      dec c
      jr nz,loop

Layer 2 256 x 192 resolution

    r_mmu_7:  defl $57
    r_disp1:  defl $69
    r_layer2: defl $70
    start:
      nextreg r_disp1,$80  ; enable layer 2
      nextreg r_layer2,$00 ; 256x192x256
      ld a,$12             ; page 18=bank 9
    loop1:
      nextreg r_mmu_7,a    ; map page into slot 7
      ld bc,$0020          ; 20*256 = 8k
      ld hl,$E000          ; address of slot 7
    loop2:
      ld (hl),b
      inc hl
      djnz loop2
      dec c
      jp NZ,loop2
      inc a
      cp $18               ; stop at page 24
      jp NZ,loop1

Layer 2 320 x 256 resolution

    r_mmu_7:  defl $57
    r_disp1:  defl $69
    r_layer2: defl $70
    start:
      nextreg r_disp1,$80  ; enable layer 2
      nextreg r_layer2,$10 ; 320x256x256
      ld a,$12             ; page 18=bank 9
    loop1:
      nextreg r_mmu_7,a    ; map page into slot 7
      ld bc,$0020          ; 20*256 = 8k
      ld hl,$E000          ; start of slot 7
    loop2:
      ld (hl),b
      inc hl
      djnz loop2
      dec c
      jp NZ,loop2
      inc a
      cp $1C               ; stop at page 28
      jp NZ,loop1

Layer 2 640 x 256 resolution

    r_mmu_7:  defl $57
    r_disp1:  defl $69
    r_layer2:  defl $70
    start:
      nextreg r_disp1, $80   ; enable layer 2
      nextreg r_layer2, $20  ; 640x256x16
      ld a, $12    ; page 18=bank 9
    loop1:
      nextreg r_mmu_7, a  ; map page into slot 7
      ld bc, $0020    ; 20*256 = 8k
      ld hl, $E000    ; start address for slot 7
    loop2:
      ld (hl), b
      inc hl
      djnz loop2
      dec c
      jp NZ, loop2
      inc a
      cp $1C      ; stop at page 28
      jp NZ, loop1

Scrolling

Scrolling Layer 2 is controlled by registers $16 and $17. (Is there a third
scrolling register for layer 2?)

Register (R/W) $16 () => Layer 2 Horizontal Scroll Control

-   bits 7-0 = X Offset (0-255)(0 on reset)

Register (R/W) $17 () => Layer 2 Vertical Scroll Control

-   bits 7-0 = Y Offset (0-191)(0 on reset)

Clipping

The Clip area for is based on the local coordinate system for the mode in
question and is set using register $18 with the option of selection which write
in active using register $1C.

Register (R/W) $18 () => Layer 2 Clip Window Definition

-   bits 7-0 = Coords of the clip window
    -   1st write - X1 position
    -   2nd write - X2 position
    -   3rd write - Y1 position
    -   4rd write - Y2 position

Reads do not advance the clip position
The values are 0,255,0,191 after a Reset

Register (R/W) $1C () => Clip Window Control

Read
-   bits 7-6 = Layer 3 Clip Index
-   bits 5-4 = Layer 0/1 Clip Index
-   bits 3-2 = Sprite clip index
-   bits 1-0 = Layer 2 Clip Index

Write
-   bits 7-4 = Reserved, must be 0
-   bit 3 - reset Layer 3 clip index
-   bit 2 - reset Layer 0/1 clip index
-   bit 1 - reset sprite clip index.
-   bit 0 - reset Layer 2 clip index.
